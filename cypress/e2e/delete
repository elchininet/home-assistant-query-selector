import { HAQuerySelectorEvent } from '../../src';

describe('HAQuerySelector dialogs tests', () => {

  beforeEach(() => {
    cy
      .ingress()
      .window()
      .its('HAQuerySelector');

    cy
      .get('home-assistant')
      .shadow()
      .find('home-assistant-main')
      .shadow()
      .find('ha-panel-lovelace')
      .shadow()
      .find('hui-root')
      .shadow()
      .find('hui-masonry-view')
      .shadow()
      .find('hui-entities-card')
      .shadow()
      .find('ha-card')
      .as('card');

    cy
      .get('@card')
      .click();

    cy
      .get('home-assistant')
      .shadow()
      .find('ha-more-info-dialog')
      .shadow()
      .find('ha-dialog ha-dialog-header ha-icon-button')
      .as('dialogHeaderButtons');

    cy
      .get('@dialogHeaderButtons')
      .eq(0)
      .click();

    cy.window().then((win) => {

      const instance = new win.HAQuerySelector();
      const onLovelaveMoreInfoDialogOpen = cy.stub().as('onLovelaveMoreInfoDialogOpen');
      const onLovelaveHistoryAndLogBookDialogOpen = cy.stub().as('onLovelaveHistoryAndLogBookDialogOpen');
      const onLovelaveSettingsDialogOpen = cy.stub().as('onLovelaveSettingsDialogOpen');
      instance.addEventListener(
        HAQuerySelectorEvent.ON_LOVELACE_MORE_INFO_DIALOG_OPEN,
        onLovelaveMoreInfoDialogOpen
      );
      instance.addEventListener(
        HAQuerySelectorEvent.ON_LOVELACE_HISTORY_AND_LOGBOOK_DIALOG_OPEN,
        onLovelaveHistoryAndLogBookDialogOpen
      );
      instance.addEventListener(
        HAQuerySelectorEvent.ON_LOVELACE_SETTINGS_DIALOG_OPEN,
        onLovelaveSettingsDialogOpen
      );
      instance.listen();

    });

  });

  afterEach(() => {
    cy
      .get('body')
      .then((body) => {
        if (body.attr('style').includes('overflow')) {
          cy
            .get('@dialogHeaderButtons')
            .eq(0)
            .click();
        }
      });
  });

  

});